#!/usr/bin/env zsh
#
# Shuriken
#
# A tool to throw confs around like a ninja
#
# {{{ License
#
# Copyright (C) 2017 Dyne.org Foundation
#
# Shuriken is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to: Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.

# }}} - License


# {{{ Initialisation

homedir=$HOME/.shuriken
basedir=.

source $basedir/zuper/zuper

vars+=(username)
vars+=(keydata)

source $basedir/zuper/zuper.init

SHURIKEN_KEYSTORE=${SHURIKEN_KEYSTORE:-$HOME/.shuriken/keys}
SHURIKEN_CONFIGS=${SHURIKEN_CONFIGS:-$HOME/.shuriken/conf}

SHURIKEN_RINGTONE=${SHURIKEN_RINGTONE:-$basedir/ryushoryken.wav}

notice "Shuriken - throw confs around like a ninja"

# }}}

# {{{ SSH

function import_ssh() {
	fn import_ssh $*
	keyfile=$1
	req=(keyfile)
	freq=($keyfile)
	ckreq || return $1

	# TODO: detect the username from last string if @ is present

	for line in ${(f)"$(cat $keyfile)"}; do
		[[ $line =~ ^ssh- ]] || continue

		len="${(w)#line}"
		last=${line[(w)$len]}
		name=${last[(ws:@:)1]}

		warning "what is the username for this key?"
		if command -v dmenu > /dev/null; then
			username=$(print "$name" | dmenu -b -p "[shuriken] username for this key? ")
		else
			read username
		fi
		[[ "$username" = "" ]] && {
			error "error: empty username"
			return 1
		}
		[[ $username =~ @ ]] && username=${username%@*}

		act "username selected: $username"
		if [[ -r $SHURIKEN_KEYSTORE/$username.pub ]]; then
			# append and eliminate duplicates
			cat $ztmpfile >> $SHURIKEN_KEYSTORE/$username.pub
			sort $SHURIKEN_KEYSTORE/$username.pub | uniq > $ztmpfile
			cp $ztmpfile $SHURIKEN_KEYSTORE/$username.pub
		else
			cp $ztmpfile $SHURIKEN_KEYSTORE/$username.pub
		fi
		notice "key succesfully imported: $username"
		play_audio $SHURIKEN_RINGTONE

	done
}

function export_ssh() {
	fn export_ssh $*
	keyfile=$1
	req=(keyfile)
	freq=($keyfile)
	ckreq || return $1

	key=$(basename $keyfile)
	username=${key[(ws:.:)1]}

	cat <<EOF | copy
if ! test "\$(id -u)" = "0"; then
    echo "[shuriken] --------------------------------"
    echo "[shuriken] cannot add ssh key for $username"
    echo "[shuriken] you must be root."
    echo "[shuriken] --------------------------------"
else

if ! test -r  /home/$username; then
    useradd -m $username
fi
mkdir -p /home/$username/.ssh
if ! test -r /home/$username/.ssh/authorized_keys; then
	touch /home/$username/.ssh/authorized_keys
fi
cat <<EOFF >> /home/$username/.ssh/authorized_keys
$(cat $keyfile)
EOFF
chmod -R go-rwx /home/$username/.ssh
chown -R $username:$username /home/$username/.ssh

fi
EOF

	notice "Ssh key ready in your sleeve!"
	play_audio $SHURIKEN_RINGTONE
}

# }}}

# {{{ CONF

function import_conf() {
	fn import_conf $*
	conffile="$1"
	req=(conffile)
	freq=($conffile)
	ckreq || return 1

	warning "what is the filename for this configuration?"
	if command -v dmenu > /dev/null; then
		filename=$(print | dmenu -b -p "[shuriken] filename for this conf? ")
	else
		read username
	fi

	cp "$conffile" "$SHURIKEN_CONFIGS/$filename" &&
		notice "Configuration imported: $filename"

	# remove the trailing dot if present and set #+shuriken-target:
	return 0
}

# step="$(readlink -f $exepath)"

function export_conf() {
	fn export_conf $*
	conffile="$1"
	req=(conffile)
	freq=($conffile)
	ckreq || return 1

	conf=$(basename $conffile)
	func "export conffile: $conffile"
	func "export conf: $conf"

# TODO: overwrite check
	cat <<EOF | copy
cat <<EOFF > $conf
$(cat $conffile)
EOFF
EOF
	# prepare it to be created as #+shuriken-target:
	return 0
}

# }}}

function filecheck() {
	fn filecheck $*
	action=$1
	file=$2
	req=(action file)
	freq=($file)
	ckreq || return 1

	filetype="$(file $file)"
	act "$filetype"
	if [[ $filetype =~ OpenSSH ]]; then
		act "OpenSSH key file detected"
		act "key storage: $SHURIKEN_KEYSTORE"
		mkdir -p $SHURIKEN_KEYSTORE
		filetype=ssh
    elif [[ $filetype =~ ASCII ]]; then
		act "ASCII text file detected, probably a configuration"
		act "conf storage: $SHURIKEN_CONFIGS"
		mkdir -p $SHURIKEN_CONFIGS
		filetype=conf
	else
		error "Unknown filetype"
		filetype=unknown
	fi

	case $action in
		import)

			case $filetype in

				ssh) import_ssh $file ;;

				conf) import_conf $file ;;

			esac
			return $?
			;;

		"export")

			case $filetype in

				ssh) export_ssh $file ;;

				conf) export_conf $file ;;

			esac
			return $?
			;;
	esac
	return 1
}


function play_audio() {
	[[ "$SHURIKEN_RINGTONE" = "" ]] && return 0
	command -v aplay > /dev/null && {
		aplay "$1" 2> /dev/null &
		return 0
	}
	command -v play > /dev/null && {
		play "$1" 2> /dev/null &
		return 0
	}
}

# {{{ MAIN
if   [[ "$1" = "" ]]; then
	act "usage: $0 [file] or - to import from stdin"
	act "[file] can be the name of anything found in the sleeve:"
	tree -a "$(dirname $SHURIKEN_CONFIGS)"
	return 0

elif [[ "$1" = "-" ]]; then
	act "importing file from stdin"
	ztmp
	cat >> $ztmpfile
	filecheck import $ztmpfile
	return $?

else
	act "exporting file: $1"

	if   [[ -r "${homedir}"/"$1" ]]; then
		func "full path to any file"
		filecheck export "${homedir}"/"$1"

	elif [[ -r $SHURIKEN_KEYSTORE/${1}.pub ]]; then
		func "found in keys"
		filecheck export $SHURIKEN_KEYSTORE/${1}.pub

	elif [[ -r $SHURIKEN_CONFIGS/${1} ]]; then
		func "found in configs"
		filecheck export $SHURIKEN_CONFIGS/${1}

	else
		error "file not found: $1"
	fi
	return $?
fi

# }}}
